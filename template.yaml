AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  RemindMe

Parameters:
  S3Bucket:
    Type: String
    Description: Parameter to specify the S3 Bucket to use for deployment
  FrontendDeployment:
    Default: remote
    Type: String
    AllowedValues:
      - local
      - remote
    ConstraintDescription: Must specify 'local' or 'remote' for FrontendDeployment.

Conditions:
  DeployCloudFront: !Equals
    - !Ref FrontendDeployment
    - remote

Globals:
  Function:
    Timeout: 20

  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"

Resources:

  #-----------------------------------------------------
  # Cognito Configuration for user management
  #-----------------------------------------------------

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${CognitoDomain}-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - !If
          - DeployCloudFront
          - !Sub "https://${CloudfrontDistribution.DomainName}"
          - http://localhost:8000
      LogoutURLs:
        - !If
          - DeployCloudFront
          - !Sub "https://${CloudfrontDistribution.DomainName}"
          - http://localhost:8000
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomain
      UserPoolId: !Ref UserPool

        #-----------------------------------------------------
      # API Endpoints and whatnot
      #-----------------------------------------------------

  RemindMeModule:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: RemindMeModule
      Handler: com.nashss.se.remindme.lambda.GetTaskLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        GetTaskLambda:
          Type: Api
          Properties:
            Path: /taskmanager/{taskManagerId}/{taskId}
            Method: get
        GetAllTasksLambda:
          Type: Api
          Properties:
            Path: /taskmanager/{taskManagerId}/
            Method: get
        CreateTaskManagerLambda:
          Type: Api
          Properties:
            Path: /taskmanager/{taskManagerId}/
            Method: post

  TaskManagerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "creatorId"
          AttributeType: "S"
        - AttributeName: "taskManagerName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "creatorId"
          KeyType: "HASH"
        - AttributeName: "taskManagerName"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "taskManager"

  TaskTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "taskId"
          AttributeType: "S"
        - AttributeName: "taskManagerId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "taskManagerId"
          KeyType: "HASH"
        - AttributeName: "taskId"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "tasks"
      GlobalSecondaryIndexes:
        - IndexName: "TaskManagerSearch"
          KeySchema:
            - AttributeName: "taskManagerId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"

  AccessRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'AccessTaskManagerTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/taskManager"
        - PolicyName: 'AccessTasksTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/tasks"
              - Effect : Allow
                Action: dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/tasks/index/*"